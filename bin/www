/**
 * Module dependencies.
 */
var fs = require('fs');
var app = require('../app');
//var debug = require('debug')('snake:server');
var http = require('http');
var https = require('https');

/**
 * Option for HTTPS
 */
var options = {
  key: fs.readFileSync('key.pem'),
  cert: fs.readFileSync('cert.pem')
};

/**
 * Create HTTP server.
 */
var serverHttp = http.createServer(app).listen(8888);

/**
 * create HTTPS server
 */
var serverHttps = https.createServer(options,app).listen(8000);

var WebSocketServer = require('ws').Server,
    wss = new WebSocketServer({server: serverHttps});

//Tableau contenant tous les joueurs
var players = [];
var count = 0;

// Broadcast global
var delay = 100; // 2000 = 2s - Debug value

// Envoi de allSnakes tous les 'delay' secondes
setInterval(broadcast, delay);

var model = require("../public/javascripts/snake");
var allSnakes = new model.allSnakes();

var message = [];

// Envoie un message ? tous les players
function broadcast() {
  if(players.length != 0)
  {
    console.log("Broadcasting to " + count + " player(s)");
    allSnakes.update();
    // Pour chaque player
    for ( var i = 0; i < count; i++ )
    {
      // Si le socket player n'est pas ouvert
      if(players[i].readyState != 1)
      {
        console.log("Socket non ouvert : " + players[i].readyState)
      }
      else
      {
        message[0] = "game";
        message[1] = allSnakes.snakes;
        players[i].send(JSON.stringify(message));  // On envoie data ? chaque player
      }
    }
  }
}

function init(player,id) {

  message[0] = "init";
  message[1] = id;
  player.send(JSON.stringify(message));
}

wss.on('connection', function(ws) {

  var id = count;
  var msg;
  console.log("Nouvelle connection");
  players[count] = ws;
  count++;
  init(ws,id);
  allSnakes.addSnake(id);

  ws.on('message', function(message) {
    msg = JSON.parse(message);
    if(msg[0] >= 0) {
      allSnakes.directions[msg[0]] = msg[1];
      console.log(allSnakes.directions[0]);
    }
    else {
      console.error("DEBUG error : ID not set : " + msg[0]);
    }
  });

  ws.on('close', function close(ws) {
    console.log("Déconnexion de " + ws);
    var indexDC = 0;
    console.log("Index removed : " + indexDC);
    players.splice(indexDC,1);
    count--;
    console.log('Disconnection : ' + count + ' players left');
  });

  ws.on('error', function() {
    console.log('ERROR');
  });
});